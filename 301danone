#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
from math import *

count_quick_sort = 0
count_fusion_sort = 0

def     affichage(size):
   if (size == 1):
      s = str(size) + " élément"
   else:
      s = str(size) + " éléments"
   print s

def     checkArgs(mylist):
   i = 0
   while (i != len(mylist)):
      try :
         mylist[i] = float(mylist[i])
         i += 1
      except:
         return -1
   return 0

def     tri_selection(mylist, size):
   tmplist = list(mylist)
   cpt = 1
   for i in range(1, size - 1):
      mini = i
      cpt += 1
      for j in range(i + 1, size):
         if (tmplist[j] < tmplist[mini]):
            mini = j
         cpt += 1
      if (mini != i):
         tmp = tmplist[mini]
         tmplist[mini] = tmplist[i]
         tmplist[i] = tmp
   print "tri par sélection :",cpt, "comparaisons"

def     tri_insertion(tab, size):
   count = 0
   i = 1
   while (i < size):
      elem = tab[i]
      j = i
      count += 1
      y = 0
      while (y < j and tab[j-1] > elem):
         tab[j] = tab[j-1]
         y += 1
         count += 1
      tab[j] = elem
      i += 1
   print "tri par insertion :", count, "comparaisons"

def     tri_a_bulles(mylist, size):
   tmplist = list(mylist)
   n = size
   count = 0
   for i in range (n - 1, 0, -1):
      for j in range(0, i, 1):
         if tmplist[j] > tmplist[j + 1]:
            tmp = mylist[j]
            tmplist[j] = tmplist[j + 1]
            tmplist[j+1] = tmp
         count += 1
   print "tri à bulles :", count, "comparaisons"

def     checkSpace(mylist):
   x = 0
   while (x != len(mylist) - 1):
      if (mylist[x] == "" or mylist[x] == " "):
         mylist.remove(mylist[x])
         x -= 1
         continue
      x += 1
   return mylist

def     partitionner(mylist, first, last, pivot):
   global count_quick_sort
   tmp = mylist[pivot]
   mylist[pivot] = mylist[last]
   mylist[last] = tmp
   j = first
   count_quick_sort += 1
   for i in range(first, last - 1):
      count_quick_sort += 1
      if (mylist[i] <= mylist[last]):
         tmp = mylist[i]
         mylist[i] = mylist[j]
         mylist[j] = tmp
         j += 1
   tmp = mylist[last]
   mylist[last] = mylist[j]
   mylist[j] = tmp
   return (j)

def     tri_rapide(mylist, first, last):
   global count_quick_sort
   if (first < last):
      pivot = (last - first) / 2
      pivot = partitionner(mylist, first, last, pivot)
      tri_rapide(mylist, first, pivot - 1)
      tri_rapide(mylist, pivot + 1, last)

def     fusion(tab1,tab2):
   global count_fusion_sort
   if tab1==[] :
      return tab2
   if tab2==[] :
      return tab1
   if tab1[0] < tab2[0] :
      count_fusion_sort += 1
      return [tab1[0]] + fusion(tab1[1 :],tab2)
   else :
      count_fusion_sort += 1
      return [tab2[0]] + fusion(tab1,tab2[1 :])

def     tri_fusion(tab):
   global count_fusion_sort
   if len(tab) <= 1 :
      return tab
   tab1=[tab[x] for x in range(len(tab)//2)]
   tab2=[tab[x] for x in range(len(tab)//2,len(tab))]
   return fusion(tri_fusion(tab1),tri_fusion(tab2))

def	main():
   try:
      file = open(sys.argv[1])
   except:
      return -1
   tmp = file.read()
   mylist = tmp.split(' ')
   mylist = checkSpace(mylist)
   size = len(mylist)
   if checkArgs(mylist) == 0:
      affichage(size)
      tri_selection(mylist, size)
      tri_insertion(mylist, size)
      tri_a_bulles(mylist, size)
      tri_fusion(mylist)
      print "tri fusion :", count_fusion_sort, "comparaisons"
      tri_rapide(mylist, 0, len(mylist) - 1)
      print "tri rapide :", count_quick_sort, "comparaisons"
      
if __name__ == '__main__':
   sys.exit(main())
